/*
 * dvm_boot_time_callbacks.h
 *
 *  Created on: Aug 19, 2016
 *      Author: compila
 */

#ifndef DVM_BOOT_TIME_CALLBACKS_H_
#define DVMBOOT_TIME_CALLBACKS_H_

#include "status.h"
#include "val.h"
#include "utils.h"


/*
 * module: MicrowaveModel-ObjectClasses-AirInterface
 */
status_t dvm_cb_get_all_air_interface_pac_keys(char **air_interface_pac_keys_list, int *num_of_keys);

char* dvm_cb_get_boot_time_airInterfaceCapability_typeOfEquipment(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_txFrequencyMin(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_txFrequencyMax(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_rxFrequencyMin(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_rxFrequencyMax(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_adaptiveModulationIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_mimoIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_mimoChannels(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_alicIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_atpcIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_atpcRange(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_encryptionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_loopBackIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_maintenanceTimerRange(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedAlarms(char *layerProtocolKeyString);

status_t dvm_cb_get_all_supported_channel_plan_list_keys(const char *air_interface_pac_key, char **supported_channel_plan_list_key_entries, int *num_of_keys);

char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_duplexDistanceIsVariable(char *layerProtocolKeyString, char* supportedChannelPlanKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_duplexDistance(char *layerProtocolKeyString, char* supportedChannelPlanKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_autoFreqSelectIsAvail(char *layerProtocolKeyString, char* supportedChannelPlanKeyString);

status_t dvm_cb_get_all_transmission_mode_id_list_keys(const char *air_interface_pac_key, const char *supported_channel_plan_key, char **transmission_mode_id_list_key_entries, int *num_of_keys);

char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_channelBandwidth(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_modulationScheme(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_informationRate(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_txPowerMin(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_txPowerMax(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_rxThreshold(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_amUpshiftLevel(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_amDownshiftLevel(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);
char* dvm_cb_get_boot_time_airInterfaceCapability_supportedChannelPlanList_transmissionModeList_xpicIsAvail(char *layerProtocolKeyString, char* supportedChannelPlanKeyString, char* transmissionModeIdKeyString);

char* dvm_cb_get_boot_time_airInterfaceConfiguration_airInterfaceName(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_radioSignalID(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_txFrequency(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_rxFrequency(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_txChannelBandwidth(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_rxChannelBandwidth(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_polarization(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_powerIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_transmitterIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_receiverIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_txPower(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_adaptiveModulationIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_modulationMin(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_modulationMax(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_xpicIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_mimoIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_alicIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_atpcIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_atpcThreshUpper(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_atpcThreshLower(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_autoFreqSelectIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_autoFreqSelectRange(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_modulationIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_encryptionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_cryptographicKey(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_loopBackIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_airInterfaceConfiguration_maintenanceTimer(char *layerProtocolKeyString);

status_t dvm_cb_get_all_problem_kind_severity_list_keys(const char *air_interface_pac_key, char **problem_kind_severity_list_key_entries, int *num_of_keys);

char* dvm_cb_get_boot_time_airInterfaceConfiguration_problemKindSeverity(char *layerProtocolKeyString, char* problemKindNameString);

/*
 * module: MicrowaveModel-ObjectClasses-PureEthernetStructure
 */
status_t dvm_cb_get_all_pure_eth_structure_pac_keys(char** air_pure_eth_structure_keys_list, int* num_of_keys);

char* dvm_cb_get_boot_time_pureEthernetStructure_structureID(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_pureEthernetStructure_problemKindSeverity(char *layerProtocolKeyString, char *problemKindNameKeyString);

/*
 * module: MicrowaveModel-ObjectClasses-EthernetContainer
 */
status_t dvm_cb_get_all_ethernet_container_pac_keys(char** ethernet_container_pac_keys_list, int* num_of_keys);

char* dvm_cb_get_boot_time_ethernetContainerCapability_bundlingIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_packetCompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_layer2CompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_vlanCompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_qInQCompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_mplsCompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_ipv4CompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_ipv6CompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_layer4CompressionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_encryptionIsAvail(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerCapability_supportedAlarms(char *layerProtocolKeyString);

status_t dvm_cb_get_all_segment_id_list_keys(const char *air_interface_pac_key, char **segment_id_list_key_entries, int *num_of_keys);

char* dvm_cb_get_boot_time_ethernetContainerConfiguration_segmentIdRef(char *layerProtocolKeyString, char* structureIdRefKeyString);

char* dvm_cb_get_boot_time_ethernetContainerConfiguration_containerID(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_packetCompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_layer2CompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_vlanCompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_qInQCompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_mplsCompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_ipv4CompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_ipv6CompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_layer4CompressionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_encryptionIsOn(char *layerProtocolKeyString);
char* dvm_cb_get_boot_time_ethernetContainerConfiguration_cryptographicKey(char *layerProtocolKeyString);

status_t dvm_cb_get_all_ethernet_container_problem_kind_severity_list_keys(const char *ethernet_container_pac_key, char **problem_kind_severity_list_key_entries, int *num_of_keys);


/*
 * module: CoreModel-CoreNetworkModule-ObjectClasses
 */
char* dvm_cb_get_boot_time_NetworkElement_uuid(void);
char* dvm_cb_get_boot_time_NetworkElement_state_pac_operationalState(void);
char* dvm_cb_get_boot_time_NetworkElement_state_pac_administrativeControl(void);
char* dvm_cb_get_boot_time_NetworkElement_state_pac_administrativeState(void);
char* dvm_cb_get_boot_time_NetworkElement_state_pac_lifecycleState(void);

char* dvm_cb_get_boot_time_NetworkElement_lpList_layerProtocolName(char *ltpUuidString, char *lpUuidString);
char* dvm_cb_get_boot_time_NetworkElement_lpList_configuredClientCapacity(char *ltpUuidString, char *lpUuidString);
char* dvm_cb_get_boot_time_NetworkElement_lpList_lpDirection(char *ltpUuidString, char *lpUuidString);
char* dvm_cb_get_boot_time_NetworkElement_lpList_terminationState(char *ltpUuidString, char *lpUuidString);

char* dvm_cb_get_boot_time_NetworkElement_ltpRefList_physicalPortReference(char *ltpUuidString);


status_t dvm_cb_get_all_server_ltp_ref_leaf_list_elements_for_ltp(char* ltp_uuid, char** server_ltp_ref_leaf_list, int* num_of_elements);
status_t dvm_cb_get_all_client_ltp_ref_leaf_list_elements_for_ltp(char* ltp_uuid, char** client_ltp_ref_leaf_list, int* num_of_elements);




#endif /* DVM_BOOT_TIME_CALLBACKS_H_ */
